// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?     @unique
  emailVerified     DateTime?
  createdSubreddits Subreddit[] @relation("Created By")

  username String? @unique

  image        String?
  accounts     Account[]
  sessions     Session[]
  Post         Post[]
  comment      Comment[]
  commentVote  CommentVote[]
  vote         Vote[]
  subscription Subscription[]
}

model Subreddit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String?
  creator     User?          @relation("Created By", fields: [creatorId], references: [id])
  subscribers Subscription[]
  userId      String?        @db.ObjectId
}

model Subscription {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String    @db.ObjectId

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  votes    Vote[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId

  replyToId String?   @db.ObjectId
  replyTo   Comment?  @relation("ReplayTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplayTo")

  votes     CommentVote[]
  commentId String?
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType
}

model CommentVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
  type      VoteType
}
